package pyqt5.qtcore;

import pyqt5.qtcore.QGlobal;
import pyqt5.qtcore.QString;
import pyqt5.qtcore.QDateTime;
import pyqt5.qtcore.QCalendar;
import pyqt5.qtcore.QChar;
import pyqt5.qtcore.Qt;
import pyqt5.qtcore.QList;
import pyqt5.qtcore.QStringList;

typedef QLocaleNumberOptions = QFlags<QLocaleNumberOption>;
typedef QLocaleDataSizeFormats = QFlags<QLocaleDataSizeFormat>;

@:pythonImport("PyQt5.QtCore", "QLocale")
@:native("QLocale")
extern class QLocale {
	static function languageToString(language:QLocaleLanguage):QString;
	static function countryToString(country:QLocaleCountry):QString;
	static function setDefault(locale:QLocale):Void;
	static function c():QLocale;
	static function system():QLocale;
	static function scriptToString(script:QLocaleScript):QString;
	static function matchingLocales(language:QLocaleLanguage, script:QLocaleScript, country:QLocaleCountry):QList<QLocale>;

	@:overload(function():QLocale {})
	@:overload(function(name:QString):QLocale {})
	@:overload(function(language:QLocaleLanguage, ?country:QLocaleCountry):QLocale {})
	@:overload(function(other:QLocale):QLocale {})
	function new(language:QLocaleLanguage, script:QLocaleScript, country:QLocaleCountry);

	function language():QLocaleLanguage;
	function country():QLocaleCountry;
	function name():QString;
	function toShort(s:QString, ?ok:Bool):Int;
	function toUShort(s:QString, ?ok:Bool):UInt;
	function toInt(s:QString, ?ok:Bool):Int;
	function toUInt(s:QString, ?ok:Bool):UInt;
	function toLongLong(s:QString, ?ok:Bool):Int;
	function toULongLong(s:QString, ?ok:Bool):UInt;
	function toFloat(s:QString, ?ok:Bool):Float;
	function toDouble(s:QString, ?ok:Bool):Float;
	@:overload(function(dateTime:QDateTime, format:QString):QString {})
	@:overload(function(dateTime:QDateTime, formatStr:QString, cal:QCalendar):QString {})
	@:overload(function(dateTime:QDateTime, ?format:QLocaleFormatType):QString {})
	@:overload(function(dateTime:QDateTime, format:QLocaleFormatType, cal:QCalendar):QString {})
	@:overload(function(date:QDate, formatStr:QString):QString {})
	@:overload(function(date:QDate, formatStr:QString, cal:QCalendar):QString {})
	@:overload(function(date:QDate, ?format:QLocaleFormatType):QString {})
	@:overload(function(date:QDate, format:QLocaleFormatType, cal:QCalendar):QString {})
	@:overload(function(time:QTime, formatStr:QString):QString {})
	@:overload(function(time:QTime, ?format:QLocaleFormatType):QString {})
	@:overload(function(i:Int):QString {})
	function toString(i:Float, ?format:Int, ?precision:Int):QString;
	function dateFormat(?format:QLocaleFormatType):QString;
	function timeFormat(?format:QLocaleFormatType):QString;
	function dateTimeFormat(?format:QLocaleFormatType):QString;
	@:overload(function(string:QString, format:QString):QDate {})
	@:overload(function(string:QString, format:QLocaleFormatType, cal:QCalendar):QDate {})
	@:overload(function(string:QString, format:QString, cal:QCalendar):QDate {})
	function toDate(string:QString, ?format:QLocaleFormatType):QDate;
	@:overload(function(string:QString, format:QString):QTime {})
	@:overload(function(string:QString, format:QLocaleFormatType, cal:QCalendar):QTime {})
	@:overload(function(string:QString, format:QString, cal:QCalendar):QTime {})
	function toTime(string:QString, ?format:QLocaleFormatType):QTime;
	@:overload(function(string:QString, format:QString):QDateTime {})
	@:overload(function(string:QString, format:QLocaleFormatType, cal:QCalendar):QDateTime {})
	@:overload(function(string:QString, format:QString, cal:QCalendar):QDateTime {})
	function toDateTime(string:QString, ?format:QLocaleFormatType):QDateTime;
	function decimalPoint():QChar;
	function groupSeparator():QChar;
	function percent():QChar;
	function zeroDigit():QChar;
	function negativeSign():QChar;
	function exponential():QChar;
	function monthName(?v:Int, ?format:QLocaleFormatType):QString;
	function dayName(?v:Int, ?format:QLocaleFormatType):QString;
	function setNumberOptions(options:QLocaleNumberOptions):Void;
	function numberOptions():QLocaleNumberOptions;
	function measurementSystem():QLocaleMeasurementSystem;
	function positiveSign():QChar;
	function standaloneMonthName(?v:Int, ?format:QLocaleFormatType):QString;
	function standaloneDayName(?v:Int, ?format:QLocaleFormatType):QString;
	function amText():QString;
	function pmText():QString;
	function textDirection():QtLayoutDirection;
	function script():QLocaleScript;
	function bcp47Name():QString;
	function nativeLanguageName():QString;
	function nativeCountryName():QString;
	function firstDayOfWeek():QtDayOfWeek;
	function weekdays():QList<QtDayOfWeek>;
	function toUpper(str:QString):QString;
	function toLower(str:QString):QString;
	function currencySymbol(?format:QLocaleCurrencySymbolFormat):QString;
	@:overload(function(value:Float, symbol:QString, precision:Int):QString {})
	@:overload(function(value:Int, ?symbol:QString):QString {})
	function toCurrencyString(value:Float, ?symbol:QString):QString;
	function uiLanguages():QStringList;
	function quoteString(str:QString, ?style:QLocaleQuotationStyle):QString;
	function createSeparatedList(list:QStringList):QString;
	function swap(other:QLocale):Void;
	function formattedDataSize(bytes:Int, ?precision:Int, ?format:QLocaleDataSizeFormats):QString;
	function toLong(s:QString, ?ok:Bool):Int;
	function toULong(s:QString, ?ok:Bool):UInt;
	function collation():QLocale;
}

@:pythonImport("PyQt5.QtCore", "QLocale")
@:native("QLocale")
extern enum abstract QLocaleLanguage(Int) from Int to Int {
	var C;
	var Abkhazian;
	var Afan;
	var Afar;
	var Afrikaans;
	var Albanian;
	var Amharic;
	var Arabic;
	var Armenian;
	var Assamese;
	var Aymara;
	var Azerbaijani;
	var Bashkir;
	var Basque;
	var Bengali;
	var Bhutani;
	var Bihari;
	var Bislama;
	var Breton;
	var Bulgarian;
	var Burmese;
	var Byelorussian;
	var Cambodian;
	var Catalan;
	var Chinese;
	var Corsican;
	var Croatian;
	var Czech;
	var Danish;
	var Dutch;
	var English;
	var Esperanto;
	var Estonian;
	var Faroese;
	var Finnish;
	var French;
	var Frisian;
	var Gaelic;
	var Galician;
	var Georgian;
	var German;
	var Greek;
	var Greenlandic;
	var Guarani;
	var Gujarati;
	var Hausa;
	var Hebrew;
	var Hindi;
	var Hungarian;
	var Icelandic;
	var Indonesian;
	var Interlingua;
	var Interlingue;
	var Inuktitut;
	var Inupiak;
	var Irish;
	var Italian;
	var Japanese;
	var Javanese;
	var Kannada;
	var Kashmiri;
	var Kazakh;
	var Kinyarwanda;
	var Kirghiz;
	var Korean;
	var Kurdish;
	var Kurundi;
	var Latin;
	var Latvian;
	var Lingala;
	var Lithuanian;
	var Macedonian;
	var Malagasy;
	var Malay;
	var Malayalam;
	var Maltese;
	var Maori;
	var Marathi;
	var Moldavian;
	var Mongolian;
	var NauruLanguage;
	var Nepali;
	var Norwegian;
	var Occitan;
	var Oriya;
	var Pashto;
	var Persian;
	var Polish;
	var Portuguese;
	var Punjabi;
	var Quechua;
	var RhaetoRomance;
	var Romanian;
	var Russian;
	var Samoan;
	var Sanskrit;
	var Serbian;
	var SerboCroatian;
	var Shona;
	var Sindhi;
	var Slovak;
	var Slovenian;
	var Somali;
	var Spanish;
	var Sundanese;
	var Swahili;
	var Swedish;
	var Tagalog;
	var Tajik;
	var Tamil;
	var Tatar;
	var Telugu;
	var Thai;
	var Tibetan;
	var Tigrinya;
	var Tsonga;
	var Turkish;
	var Turkmen;
	var Twi;
	var Uigur;
	var Ukrainian;
	var Urdu;
	var Uzbek;
	var Vietnamese;
	var Volapuk;
	var Welsh;
	var Wolof;
	var Xhosa;
	var Yiddish;
	var Yoruba;
	var Zhuang;
	var Zulu;
	var Bosnian;
	var Divehi;
	var Manx;
	var Cornish;
	var LastLanguage;
	var NorwegianBokmal;
	var NorwegianNynorsk;
	var Akan;
	var Konkani;
	var Ga;
	var Igbo;
	var Kamba;
	var Syriac;
	var Blin;
	var Geez;
	var Koro;
	var Sidamo;
	var Atsam;
	var Tigre;
	var Jju;
	var Friulian;
	var Venda;
	var Ewe;
	var Walamo;
	var Hawaiian;
	var Tyap;
	var Chewa;
	var Filipino;
	var SwissGerman;
	var SichuanYi;
	var Kpelle;
	var LowGerman;
	var SouthNdebele;
	var NorthernSotho;
	var NorthernSami;
	var Taroko;
	var Gusii;
	var Taita;
	var Fulah;
	var Kikuyu;
	var Samburu;
	var Sena;
	var NorthNdebele;
	var Rombo;
	var Tachelhit;
	var Kabyle;
	var Nyankole;
	var Bena;
	var Vunjo;
	var Bambara;
	var Embu;
	var Cherokee;
	var Morisyen;
	var Makonde;
	var Langi;
	var Ganda;
	var Bemba;
	var Kabuverdianu;
	var Meru;
	var Kalenjin;
	var Nama;
	var Machame;
	var Colognian;
	var Masai;
	var Soga;
	var Luyia;
	var Asu;
	var Teso;
	var Saho;
	var KoyraChiini;
	var Rwa;
	var Luo;
	var Chiga;
	var CentralMoroccoTamazight;
	var KoyraboroSenni;
	var Shambala;
	var AnyLanguage;
	var Rundi;
	var Bodo;
	var Aghem;
	var Basaa;
	var Zarma;
	var Duala;
	var JolaFonyi;
	var Ewondo;
	var Bafia;
	var LubaKatanga;
	var MakhuwaMeetto;
	var Mundang;
	var Kwasio;
	var Nuer;
	var Sakha;
	var Sangu;
	var CongoSwahili;
	var Tasawaq;
	var Vai;
	var Walser;
	var Yangben;
	var Oromo;
	var Dzongkha;
	var Belarusian;
	var Khmer;
	var Fijian;
	var WesternFrisian;
	var Lao;
	var Marshallese;
	var Romansh;
	var Sango;
	var Ossetic;
	var SouthernSotho;
	var Tswana;
	var Sinhala;
	var Swati;
	var Sardinian;
	var Tongan;
	var Tahitian;
	var Nyanja;
	var Avaric;
	var Chamorro;
	var Chechen;
	var Church;
	var Chuvash;
	var Cree;
	var Haitian;
	var Herero;
	var HiriMotu;
	var Kanuri;
	var Komi;
	var Kongo;
	var Kwanyama;
	var Limburgish;
	var Luxembourgish;
	var Navaho;
	var Ndonga;
	var Ojibwa;
	var Pali;
	var Walloon;
	var Avestan;
	var Asturian;
	var Ngomba;
	var Kako;
	var Meta;
	var Ngiemboon;
	var Uighur;
	var Aragonese;
	var Akkadian;
	var AncientEgyptian;
	var AncientGreek;
	var Aramaic;
	var Balinese;
	var Bamun;
	var BatakToba;
	var Buginese;
	var Buhid;
	var Carian;
	var Chakma;
	var ClassicalMandaic;
	var Coptic;
	var Dogri;
	var EasternCham;
	var EasternKayah;
	var Etruscan;
	var Gothic;
	var Hanunoo;
	var Ingush;
	var LargeFloweryMiao;
	var Lepcha;
	var Limbu;
	var Lisu;
	var Lu;
	var Lycian;
	var Lydian;
	var Mandingo;
	var Manipuri;
	var Meroitic;
	var NorthernThai;
	var OldIrish;
	var OldNorse;
	var OldPersian;
	var OldTurkish;
	var Pahlavi;
	var Parthian;
	var Phoenician;
	var PrakritLanguage;
	var Rejang;
	var Sabaean;
	var Samaritan;
	var Santali;
	var Saurashtra;
	var Sora;
	var Sylheti;
	var Tagbanwa;
	var TaiDam;
	var TaiNua;
	var Ugaritic;
	var Akoose;
	var Lakota;
	var StandardMoroccanTamazight;
	var Mapuche;
	var CentralKurdish;
	var LowerSorbian;
	var UpperSorbian;
	var Kenyang;
	var Mohawk;
	var Nko;
	var Prussian;
	var Kiche;
	var SouthernSami;
	var LuleSami;
	var InariSami;
	var SkoltSami;
	var Warlpiri;
	var ManichaeanMiddlePersian;
	var Mende;
	var AncientNorthArabian;
	var LinearA;
	var HmongNjua;
	var Ho;
	var Lezghian;
	var Bassa;
	var Mono;
	var TedimChin;
	var Maithili;
	var Ahom;
	var AmericanSignLanguage;
	var ArdhamagadhiPrakrit;
	var Bhojpuri;
	var HieroglyphicLuwian;
	var LiteraryChinese;
	var Mazanderani;
	var Mru;
	var Newari;
	var NorthernLuri;
	var Palauan;
	var Papiamento;
	var Saraiki;
	var TokelauLanguage;
	var TokPisin;
	var TuvaluLanguage;
	var UncodedLanguages;
	var Cantonese;
	var Osage;
	var Tangut;
	var Ido;
	var Lojban;
	var Sicilian;
	var SouthernKurdish;
	var WesternBalochi;
	var Cebuano;
	var Erzya;
	var Chickasaw;
	var Muscogee;
	var Silesian;
}

@:pythonImport("PyQt5.QtCore", "QLocale")
@:native("QLocale")
extern enum abstract QLocaleCountry(Int) from Int to Int {
	var AnyCountry;
	var Afghanistan;
	var Albania;
	var Algeria;
	var AmericanSamoa;
	var Andorra;
	var Angola;
	var Anguilla;
	var Antarctica;
	var AntiguaAndBarbuda;
	var Argentina;
	var Armenia;
	var Aruba;
	var Australia;
	var Austria;
	var Azerbaijan;
	var Bahamas;
	var Bahrain;
	var Bangladesh;
	var Barbados;
	var Belarus;
	var Belgium;
	var Belize;
	var Benin;
	var Bermuda;
	var Bhutan;
	var Bolivia;
	var BosniaAndHerzegowina;
	var Botswana;
	var BouvetIsland;
	var Brazil;
	var BritishIndianOceanTerritory;
	var Bulgaria;
	var BurkinaFaso;
	var Burundi;
	var Cambodia;
	var Cameroon;
	var Canada;
	var CapeVerde;
	var CaymanIslands;
	var CentralAfricanRepublic;
	var Chad;
	var Chile;
	var China;
	var ChristmasIsland;
	var CocosIslands;
	var Colombia;
	var Comoros;
	var DemocraticRepublicOfCongo;
	var PeoplesRepublicOfCongo;
	var CookIslands;
	var CostaRica;
	var IvoryCoast;
	var Croatia;
	var Cuba;
	var Cyprus;
	var CzechRepublic;
	var Denmark;
	var Djibouti;
	var Dominica;
	var DominicanRepublic;
	var EastTimor;
	var Ecuador;
	var Egypt;
	var ElSalvador;
	var EquatorialGuinea;
	var Eritrea;
	var Estonia;
	var Ethiopia;
	var FalklandIslands;
	var FaroeIslands;
	var Finland;
	var France;
	var FrenchGuiana;
	var FrenchPolynesia;
	var FrenchSouthernTerritories;
	var Gabon;
	var Gambia;
	var Georgia;
	var Germany;
	var Ghana;
	var Gibraltar;
	var Greece;
	var Greenland;
	var Grenada;
	var Guadeloupe;
	var Guam;
	var Guatemala;
	var Guinea;
	var GuineaBissau;
	var Guyana;
	var Haiti;
	var HeardAndMcDonaldIslands;
	var Honduras;
	var HongKong;
	var Hungary;
	var Iceland;
	var India;
	var Indonesia;
	var Iran;
	var Iraq;
	var Ireland;
	var Israel;
	var Italy;
	var Jamaica;
	var Japan;
	var Jordan;
	var Kazakhstan;
	var Kenya;
	var Kiribati;
	var DemocraticRepublicOfKorea;
	var RepublicOfKorea;
	var Kuwait;
	var Kyrgyzstan;
	var Latvia;
	var Lebanon;
	var Lesotho;
	var Liberia;
	var Liechtenstein;
	var Lithuania;
	var Luxembourg;
	var Macau;
	var Macedonia;
	var Madagascar;
	var Malawi;
	var Malaysia;
	var Maldives;
	var Mali;
	var Malta;
	var MarshallIslands;
	var Martinique;
	var Mauritania;
	var Mauritius;
	var Mayotte;
	var Mexico;
	var Micronesia;
	var Moldova;
	var Monaco;
	var Mongolia;
	var Montserrat;
	var Morocco;
	var Mozambique;
	var Myanmar;
	var Namibia;
	var NauruCountry;
	var Nepal;
	var Netherlands;
	var NewCaledonia;
	var NewZealand;
	var Nicaragua;
	var Niger;
	var Nigeria;
	var Niue;
	var NorfolkIsland;
	var NorthernMarianaIslands;
	var Norway;
	var Oman;
	var Pakistan;
	var Palau;
	var Panama;
	var PapuaNewGuinea;
	var Paraguay;
	var Peru;
	var Philippines;
	var Pitcairn;
	var Poland;
	var Portugal;
	var PuertoRico;
	var Qatar;
	var Reunion;
	var Romania;
	var RussianFederation;
	var Rwanda;
	var SaintKittsAndNevis;
	var Samoa;
	var SanMarino;
	var SaoTomeAndPrincipe;
	var SaudiArabia;
	var Senegal;
	var Seychelles;
	var SierraLeone;
	var Singapore;
	var Slovakia;
	var Slovenia;
	var SolomonIslands;
	var Somalia;
	var SouthAfrica;
	var SouthGeorgiaAndTheSouthSandwichIslands;
	var Spain;
	var SriLanka;
	var Sudan;
	var Suriname;
	var SvalbardAndJanMayenIslands;
	var Swaziland;
	var Sweden;
	var Switzerland;
	var SyrianArabRepublic;
	var Taiwan;
	var Tajikistan;
	var Tanzania;
	var Thailand;
	var Togo;
	var Tokelau;
	var TrinidadAndTobago;
	var Tunisia;
	var Turkey;
	var Turkmenistan;
	var TurksAndCaicosIslands;
	var Tuvalu;
	var Uganda;
	var Ukraine;
	var UnitedArabEmirates;
	var UnitedKingdom;
	var UnitedStates;
	var UnitedStatesMinorOutlyingIslands;
	var Uruguay;
	var Uzbekistan;
	var Vanuatu;
	var VaticanCityState;
	var Venezuela;
	var BritishVirginIslands;
	var WallisAndFutunaIslands;
	var WesternSahara;
	var Yemen;
	var Zambia;
	var Zimbabwe;
	var Montenegro;
	var Serbia;
	var SaintBarthelemy;
	var SaintMartin;
	var LatinAmericaAndTheCaribbean;
	var LastCountry;
	var Brunei;
	var CongoKinshasa;
	var CongoBrazzaville;
	var Fiji;
	var Guernsey;
	var NorthKorea;
	var SouthKorea;
	var Laos;
	var Libya;
	var CuraSao;
	var PalestinianTerritories;
	var Russia;
	var SaintLucia;
	var SaintVincentAndTheGrenadines;
	var SaintHelena;
	var SaintPierreAndMiquelon;
	var Syria;
	var Tonga;
	var Vietnam;
	var UnitedStatesVirginIslands;
	var CanaryIslands;
	var ClippertonIsland;
	var AscensionIsland;
	var AlandIslands;
	var DiegoGarcia;
	var CeutaAndMelilla;
	var IsleOfMan;
	var Jersey;
	var TristanDaCunha;
	var SouthSudan;
	var Bonaire;
	var SintMaarten;
	var Kosovo;
	var TokelauCountry;
	var TuvaluCountry;
	var EuropeanUnion;
	var OutlyingOceania;
	var LatinAmerica;
	var World;
	var Europe;
}

@:pythonImport("PyQt5.QtCore", "QLocale")
@:native("QLocale")
extern enum abstract QLocaleNumberOption(Int) from Int to Int {
	var OmitGroupSeparator;
	var RejectGroupSeparator;
	var DefaultNumberOptions;
	var OmitLeadingZeroInExponent;
	var RejectLeadingZeroInExponent;
	var IncludeTrailingZeroesAfterDot;
	var RejectTrailingZeroesAfterDot;
}

@:pythonImport("PyQt5.QtCore", "QLocale")
@:native("QLocale")
extern enum abstract QLocaleFormatType(Int) from Int to Int {
	var LongFormat;
	var ShortFormat;
	var NarrowFormat;
}

@:pythonImport("PyQt5.QtCore", "QLocale")
@:native("QLocale")
extern enum abstract QLocaleMeasurementSystem(Int) from Int to Int {
	var MetricSystem;
	var ImperialSystem;
	var ImperialUSSystem;
	var ImperialUKSystem;
}

@:pythonImport("PyQt5.QtCore", "QLocale")
@:native("QLocale")
extern enum abstract QLocaleScript(Int) from Int to Int {
	var AnyScript;
	var ArabicScript;
	var CyrillicScript;
	var DeseretScript;
	var GurmukhiScript;
	var SimplifiedHanScript;
	var TraditionalHanScript;
	var LatinScript;
	var MongolianScript;
	var TifinaghScript;
	var SimplifiedChineseScript;
	var TraditionalChineseScript;
	var ArmenianScript;
	var BengaliScript;
	var CherokeeScript;
	var DevanagariScript;
	var EthiopicScript;
	var GeorgianScript;
	var GreekScript;
	var GujaratiScript;
	var HebrewScript;
	var JapaneseScript;
	var KhmerScript;
	var KannadaScript;
	var KoreanScript;
	var LaoScript;
	var MalayalamScript;
	var MyanmarScript;
	var OriyaScript;
	var TamilScript;
	var TeluguScript;
	var ThaanaScript;
	var ThaiScript;
	var TibetanScript;
	var SinhalaScript;
	var SyriacScript;
	var YiScript;
	var VaiScript;
	var AvestanScript;
	var BalineseScript;
	var BamumScript;
	var BatakScript;
	var BopomofoScript;
	var BrahmiScript;
	var BugineseScript;
	var BuhidScript;
	var CanadianAboriginalScript;
	var CarianScript;
	var ChakmaScript;
	var ChamScript;
	var CopticScript;
	var CypriotScript;
	var EgyptianHieroglyphsScript;
	var FraserScript;
	var GlagoliticScript;
	var GothicScript;
	var HanScript;
	var HangulScript;
	var HanunooScript;
	var ImperialAramaicScript;
	var InscriptionalPahlaviScript;
	var InscriptionalParthianScript;
	var JavaneseScript;
	var KaithiScript;
	var KatakanaScript;
	var KayahLiScript;
	var KharoshthiScript;
	var LannaScript;
	var LepchaScript;
	var LimbuScript;
	var LinearBScript;
	var LycianScript;
	var LydianScript;
	var MandaeanScript;
	var MeiteiMayekScript;
	var MeroiticScript;
	var MeroiticCursiveScript;
	var NkoScript;
	var NewTaiLueScript;
	var OghamScript;
	var OlChikiScript;
	var OldItalicScript;
	var OldPersianScript;
	var OldSouthArabianScript;
	var OrkhonScript;
	var OsmanyaScript;
	var PhagsPaScript;
	var PhoenicianScript;
	var PollardPhoneticScript;
	var RejangScript;
	var RunicScript;
	var SamaritanScript;
	var SaurashtraScript;
	var SharadaScript;
	var ShavianScript;
	var SoraSompengScript;
	var CuneiformScript;
	var SundaneseScript;
	var SylotiNagriScript;
	var TagalogScript;
	var TagbanwaScript;
	var TaiLeScript;
	var TaiVietScript;
	var TakriScript;
	var UgariticScript;
	var BrailleScript;
	var HiraganaScript;
	var CaucasianAlbanianScript;
	var BassaVahScript;
	var DuployanScript;
	var ElbasanScript;
	var GranthaScript;
	var PahawhHmongScript;
	var KhojkiScript;
	var LinearAScript;
	var MahajaniScript;
	var ManichaeanScript;
	var MendeKikakuiScript;
	var ModiScript;
	var MroScript;
	var OldNorthArabianScript;
	var NabataeanScript;
	var PalmyreneScript;
	var PauCinHauScript;
	var OldPermicScript;
	var PsalterPahlaviScript;
	var SiddhamScript;
	var KhudawadiScript;
	var TirhutaScript;
	var VarangKshitiScript;
	var AhomScript;
	var AnatolianHieroglyphsScript;
	var HatranScript;
	var MultaniScript;
	var OldHungarianScript;
	var SignWritingScript;
	var AdlamScript;
	var BhaiksukiScript;
	var MarchenScript;
	var NewaScript;
	var OsageScript;
	var TangutScript;
	var HanWithBopomofoScript;
	var JamoScript;
}

@:pythonImport("PyQt5.QtCore", "QLocale")
@:native("QLocale")
extern enum abstract QLocaleCurrencySymbolFormat(Int) from Int to Int {
	var CurrencyIsoCode;
	var CurrencySymbol;
	var CurrencyDisplayName;
}

@:pythonImport("PyQt5.QtCore", "QLocale")
@:native("QLocale")
extern enum abstract QLocaleQuotationStyle(Int) from Int to Int {
	var StandardQuotation;
	var AlternateQuotation;
}

@:pythonImport("PyQt5.QtCore", "QLocale")
@:native("QLocale")
extern enum abstract QLocaleFloatingPointPrecisionOption(Int) from Int to Int {
	var FloatingPointShortest;
}

@:pythonImport("PyQt5.QtCore", "QLocale")
@:native("QLocale")
extern enum abstract QLocaleDataSizeFormat(Int) from Int to Int {
	var DataSizeIecFormat;
	var DataSizeTraditionalFormat;
	var DataSizeSIFormat;
}

